/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_COMMONAPI_CLUSTER_SOMEIP_STUB_ADAPTER_HPP_
#define V1_COMMONAPI_CLUSTER_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/commonapi/ClusterStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

template <typename _Stub = ::v1::commonapi::ClusterStub, typename... _Stubs>
class ClusterSomeIPStubAdapterInternal
    : public virtual ClusterStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< ClusterSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> ClusterSomeIPStubAdapterHelper;

    ~ClusterSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        ClusterSomeIPStubAdapterHelper::deinit();
    }

    void fireErrrorCheckAttributeChanged(const bool &_value);
    
    void fireErrorBroadcastEvent(const int32_t &_result);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::ClusterStub,
        CommonAPI::Version
    > getClusterInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::ClusterStub,
        bool
    > getErrrorCheckAttributeStubDispatcher;
    
    CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::commonapi::ClusterStub,
        std::tuple< std::vector< uint8_t >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >>
    > sendImage1StubDispatcher;
    
    CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::commonapi::ClusterStub,
        std::tuple< std::vector< uint8_t >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >>
    > sendImage2StubDispatcher;
    
    CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::commonapi::ClusterStub,
        std::tuple< std::vector< uint8_t >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >>
    > sendImage3StubDispatcher;
    
    CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::commonapi::ClusterStub,
        std::tuple< std::vector< uint8_t >>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >>
    > sendImage4StubDispatcher;
    
    ClusterSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        ClusterSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< ClusterStub>(_stub)),
        getClusterInterfaceVersionStubDispatcher(&ClusterStub::lockInterfaceVersionAttribute, &ClusterStub::getInterfaceVersion, false, true),
        getErrrorCheckAttributeStubDispatcher(
            &::v1::commonapi::ClusterStub::lockErrrorCheckAttribute,
            &::v1::commonapi::ClusterStub::getErrrorCheckAttribute,
            false,
            _stub->hasElement(0))
        ,
        sendImage1StubDispatcher(
            &ClusterStub::sendImage1,
            false,
            _stub->hasElement(1),
            std::make_tuple(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr)))
        
        ,
        sendImage2StubDispatcher(
            &ClusterStub::sendImage2,
            false,
            _stub->hasElement(2),
            std::make_tuple(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr)))
        
        ,
        sendImage3StubDispatcher(
            &ClusterStub::sendImage3,
            false,
            _stub->hasElement(3),
            std::make_tuple(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr)))
        
        ,
        sendImage4StubDispatcher(
            &ClusterStub::sendImage4,
            false,
            _stub->hasElement(4),
            std::make_tuple(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr)))
        
    {
        ClusterSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x2007) }, &getErrrorCheckAttributeStubDispatcher );
        ClusterSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7c) }, &sendImage1StubDispatcher );
        ClusterSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7d) }, &sendImage2StubDispatcher );
        ClusterSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7e) }, &sendImage3StubDispatcher );
        ClusterSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7f) }, &sendImage4StubDispatcher );
        std::shared_ptr<CommonAPI::SomeIP::ClientId> itsClient = std::make_shared<CommonAPI::SomeIP::ClientId>(0xFFFF, 0xFFFFFFFF, 0xFFFFFFFF);

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1002));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8235), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        if (_stub->hasElement(0)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1001)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xa005), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireErrrorCheckAttributeChanged(std::dynamic_pointer_cast< ::v1::commonapi::ClusterStub>(_stub)->getErrrorCheckAttribute(itsClient));
        }

    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void ClusterSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireErrrorCheckAttributeChanged(const bool &_value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            bool
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xa005),
        false,
        _value
    );
}

template <typename _Stub, typename... _Stubs>
void ClusterSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireErrorBroadcastEvent(const int32_t &_result) {
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deployed_result(_result, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t> > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8235),
            false,
             deployed_result 
    );
}


template <typename _Stub, typename... _Stubs>
void ClusterSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {
}

template <typename _Stub, typename... _Stubs>
void ClusterSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {
}

template <typename _Stub = ::v1::commonapi::ClusterStub, typename... _Stubs>
class ClusterSomeIPStubAdapter
    : public ClusterSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    ClusterSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          ClusterSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace commonapi
} // namespace v1

#endif // V1_COMMONAPI_Cluster_SOMEIP_STUB_ADAPTER_HPP_
