/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/commonapi/ClusterSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createClusterSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< ClusterSomeIPProxy>(_address, _connection);
}

void initializeClusterSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.Cluster:v1_0:cluster_service",
        0x1234, 0x5678, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "commonapi.Cluster:v1_0",
        &createClusterSomeIPProxy);
}

INITIALIZER(registerClusterSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeClusterSomeIPProxy);
}

ClusterSomeIPProxy::ClusterSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          errrorCheck_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1001), CommonAPI::SomeIP::event_id_t(0xa005), CommonAPI::SomeIP::method_id_t(0x2007), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
          errorBroadcast_(*this, 0x1002, CommonAPI::SomeIP::event_id_t(0x8235), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr)))
{
}

ClusterSomeIPProxy::~ClusterSomeIPProxy() {
    completed_.set_value();
}

ClusterSomeIPProxy::ErrrorCheckAttribute& ClusterSomeIPProxy::getErrrorCheckAttribute() {
    return errrorCheck_;
}

ClusterSomeIPProxy::ErrorBroadcastEvent& ClusterSomeIPProxy::getErrorBroadcastEvent() {
    return errorBroadcast_;
}

void ClusterSomeIPProxy::sendImage1(std::vector< uint8_t > _image1, CommonAPI::CallStatus &_internalCallStatus) {
    CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> deploy_image1(_image1, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint8_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethod(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7c),
        false,
        false,
        deploy_image1,
        _internalCallStatus);
}

void ClusterSomeIPProxy::sendImage2(std::vector< uint8_t > _image2, CommonAPI::CallStatus &_internalCallStatus) {
    CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> deploy_image2(_image2, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint8_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethod(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7d),
        false,
        false,
        deploy_image2,
        _internalCallStatus);
}

void ClusterSomeIPProxy::sendImage3(std::vector< uint8_t > _image3, CommonAPI::CallStatus &_internalCallStatus) {
    CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> deploy_image3(_image3, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint8_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethod(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7e),
        false,
        false,
        deploy_image3,
        _internalCallStatus);
}

void ClusterSomeIPProxy::sendImage4(std::vector< uint8_t > _image4, CommonAPI::CallStatus &_internalCallStatus) {
    CommonAPI::Deployable< std::vector< uint8_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> deploy_image4(_image4, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint8_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint8_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethod(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7f),
        false,
        false,
        deploy_image4,
        _internalCallStatus);
}

void ClusterSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> ClusterSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace commonapi
} // namespace v1
